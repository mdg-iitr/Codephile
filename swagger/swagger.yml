swagger: "2.0"
info:
  title: Codephile Official API
  description: Documentation for Codephile API
  version: 1.0.0
  contact:
    email: mdg@iitr.ac.in
  license: {}
basePath: /v1
paths:
  /contests/:
    get:
      tags:
      - contests
      description: displays all contests
      operationId: ContestController.GetContests
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.S'
        "403":
          description: error
  /contests/{site}:
    get:
      tags:
      - contests
      description: Returns the contests of a specific website
      operationId: ContestController.Get Particular Site's Contests
      parameters:
      - in: path
        name: site
        description: site name
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.S'
        "403":
          description: incorrect site or unknown error
  /object/:
    get:
      tags:
      - object
      description: get all objects
      operationId: ObjectController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    post:
      tags:
      - object
      description: create object
      operationId: ObjectController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /object/{objectId}:
    get:
      tags:
      - object
      description: find object by objectid
      operationId: ObjectController.Get
      parameters:
      - in: path
        name: objectId
        description: the objectid you want to get
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    put:
      tags:
      - object
      description: update the object
      operationId: ObjectController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    delete:
      tags:
      - object
      description: delete the object
      operationId: ObjectController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: objectId is empty
  /submission/{site}/{uid}:
    post:
      tags:
      - submission
      description: Triggers saving of user's submissions across a particular platform
        into database
      operationId: SubmissionController.Post
      parameters:
      - in: path
        name: uid
        description: UID of user
        required: true
        type: string
      - in: path
        name: site
        description: Platform site name
        required: true
        type: string
      responses:
        "200":
          description: submission successfully saved
        "403":
          description: user or site invalid
  /submission/{uid}:
    get:
      tags:
      - submission
      description: Get submissions of user across various platforms
      operationId: SubmissionController.Get
      parameters:
      - in: path
        name: uid
        description: UID of user
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/submission.Submissions'
        "403":
          description: user not exist
  /user/{uid}:
    get:
      tags:
      - user
      description: get user by uid
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is empty
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is not int
  /user/all:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
  /user/fetch/{site}:
    post:
      tags:
      - user
      description: Fetches user info from different websites and store them into the
        database
      operationId: UserController.Fetch User Info
      parameters:
      - in: path
        name: site
        description: site name
        required: true
        type: string
      - in: query
        name: handle
        description: handle to fetch data from
        required: true
        type: string
      - in: query
        name: uid
        description: uid of user
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/Success'
        "403":
          description: incorrect site or handle
  /user/fetch/{uid}:
    get:
      tags:
      - user
      description: Fetches user info from different websites and returns them
      operationId: UserController.Fetch All User Profiles And returns them
      parameters:
      - in: path
        name: uid
        description: UID of user
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/profile.AllProfiles'
        "403":
          description: invalid user
  /user/login:
    post:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: query
        name: username
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/logout:
    post:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
  /user/signup:
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{int} models.User.Id'
        "403":
          description: body is empty
  /user/verify/{site}:
    get:
      tags:
      - user
      description: verify user handles across different websites
      operationId: UserController.Verify site handles
      parameters:
      - in: path
        name: site
        description: site name
        required: true
        type: string
      - in: query
        name: handle
        description: handle to verify
        required: true
        type: string
      responses:
        "200":
          description: '{string} Handle valid'
        "403":
          description: incorrect site or handle
definitions:
  Success:
    title: Success
    type: object
  bson.ObjectId:
    title: ObjectId
    type: object
  models.Handle:
    title: Handle
    type: object
    properties:
      codechef:
        type: string
      codeforces:
        type: string
      hackerearth:
        type: string
      hackerrank:
        type: string
      spoj:
        type: string
  models.Object:
    title: Object
    type: object
    properties:
      ObjectId:
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
  models.Ongoing:
    title: Ongoing
    type: object
    properties:
      EndTime:
        type: string
      Name:
        type: string
      Platform:
        type: string
      challenge_type:
        type: string
      url:
        type: string
  models.Result:
    title: Result
    type: object
    properties:
      ongoing:
        type: array
        items:
          $ref: '#/definitions/models.Ongoing'
      timestamp:
        type: string
      upcoming:
        type: array
        items:
          $ref: '#/definitions/models.Upcoming'
  models.S:
    title: S
    type: object
    properties:
      result:
        $ref: '#/definitions/models.Result'
  models.Upcoming:
    title: Upcoming
    type: object
    properties:
      Duration:
        type: string
      EndTime:
        type: string
      Name:
        type: string
      Platform:
        type: string
      StartTime:
        type: string
      challenge_type:
        type: string
      url:
        type: string
  models.User:
    title: User
    type: object
    properties:
      handle:
        $ref: '#/definitions/models.Handle'
      id:
        $ref: '#/definitions/bson.ObjectId'
      username:
        type: string
  profile.AllProfiles:
    title: AllProfiles
    type: object
    properties:
      codechefProfile:
        $ref: '#/definitions/profile.Profile'
      codeforcesProfile:
        $ref: '#/definitions/profile.Profile'
      hackerrankProfile:
        $ref: '#/definitions/profile.Profile'
      spojProfile:
        $ref: '#/definitions/profile.Profile'
  profile.Profile:
    title: Profile
    type: object
    properties:
      profile:
        $ref: '#/definitions/profile.ProfileInfo'
      website:
        type: string
  profile.ProfileInfo:
    title: ProfileInfo
    type: object
    properties:
      name:
        type: string
      rank:
        type: string
      school:
        type: string
      userName:
        type: string
  submission.CodechefSubmission:
    title: CodechefSubmission
    type: object
    properties:
      CreationDate:
        type: string
      Name:
        type: string
      Points:
        type: string
      Status:
        type: string
      URL:
        type: string
  submission.CodeforcesSubmission:
    title: CodeforcesSubmission
    type: object
    properties:
      CreationDate:
        type: string
        format: datetime
      Name:
        type: string
      URL:
        type: string
  submission.HackerrankSubmission:
    title: HackerrankSubmission
    type: object
    properties:
      created_at:
        type: string
      name:
        type: string
      url:
        type: string
  submission.SpojSubmission:
    title: SpojSubmission
    type: object
    properties:
      CreationDate:
        type: string
      Language:
        type: string
      Name:
        type: string
      Status:
        type: string
      URL:
        type: string
  submission.Submissions:
    title: Submissions
    type: object
    properties:
      Codechef:
        type: array
        items:
          $ref: '#/definitions/submission.CodechefSubmission'
      Codeforces:
        type: array
        items:
          $ref: '#/definitions/submission.CodeforcesSubmission'
      Hackerrank:
        type: array
        items:
          $ref: '#/definitions/submission.HackerrankSubmission'
      Spoj:
        type: array
        items:
          $ref: '#/definitions/submission.SpojSubmission'
tags:
- name: object
  description: |
    Operations about object
- name: user
  description: |
    Operations about Users
- name: contests
  description: |
    Controller to display contests
