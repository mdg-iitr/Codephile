swagger: "2.0"
info:
  title: Codephile Official API
  description: Documentation for Codephile API
  version: 1.0.0
  contact:
    email: mdg@iitr.ac.in
  license: {}
basePath: /v1
paths:
  /contests/:
    get:
      tags:
      - contests
      description: displays all contests
      operationId: ContestController.GetContests
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.types.S'
        "403":
          description: error
      security:
      - token_auth:
        - read:contests
  /contests/{site}:
    get:
      tags:
      - contests
      description: Returns the contests of a specific website
      operationId: ContestController.Get Particular Site's Contests
      parameters:
      - in: path
        name: site
        description: site name
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.types.S'
        "403":
          description: incorrect site or unknown error
      security:
      - token_auth:
        - read:contests
  /feed/contests:
    get:
      tags:
      - feed
      description: Provides Data for contests in the Feed
      operationId: FeedController.ContestsFeed
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.types.S'
        "403":
          description: Error fetching contests
      security:
      - token_auth:
        - read:feed
  /feed/friend-activity:
    get:
      tags:
      - feed
      description: Provides Data for Friend Activity in the Feed
      operationId: FeedController.FriendFeed
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.types.FeedObject'
        "403":
          description: Invalid uid
      security:
      - token_auth:
        - read:feed
  /follow/compare:
    get:
      tags:
      - follow
      description: Compares the data of two users
      operationId: FollowController.CompareUser
      parameters:
      - in: query
        name: uid2
        description: uid of following
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.types.AllWorldRanks'
        "403":
          description: Invalid uid
      security:
      - token_auth:
        - read:follow
  /follow/following:
    get:
      tags:
      - follow
      description: Fetches the users the user is following
      operationId: FollowController.GetFollowing
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.types.Following'
        "403":
          description: Invalid uid
      security:
      - token_auth:
        - read:follow
    post:
      tags:
      - follow
      description: Adds the Following user's uid to the database
      operationId: FollowController.FollowUser
      parameters:
      - in: query
        name: uid2
        description: uid of following
        required: true
        type: string
      responses:
        "200":
          description: '{string} user followed'
        "403":
          description: Invalid uid
      security:
      - token_auth:
        - write:follow
  /object/:
    get:
      tags:
      - object
      description: get all objects
      operationId: ObjectController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    post:
      tags:
      - object
      description: create object
      operationId: ObjectController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /object/{objectId}:
    get:
      tags:
      - object
      description: find object by objectid
      operationId: ObjectController.Get
      parameters:
      - in: path
        name: objectId
        description: the objectid you want to get
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    put:
      tags:
      - object
      description: update the object
      operationId: ObjectController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    delete:
      tags:
      - object
      description: delete the object
      operationId: ObjectController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: objectId is empty
  /submission/{site}:
    post:
      tags:
      - submission
      description: Triggers saving of user's submissions across a particular platform
        into database
      operationId: SubmissionController.Post
      parameters:
      - in: path
        name: site
        description: Platform site name
        required: true
        type: string
      responses:
        "200":
          description: submission successfully saved
        "403":
          description: user or site invalid
      security:
      - token_auth:
        - write:submission
  /submission/{site}/{uid}/filter:
    get:
      tags:
      - submission
      description: Filter submissions of user on the basis of status, site and tags
      operationId: SubmissionController.Filter
      parameters:
      - in: path
        name: uid
        description: UID of user
        type: string
      - in: path
        name: site
        description: Website name
        required: true
        type: string
      - in: query
        name: status
        description: Submission status
        type: string
      - in: query
        name: tag
        description: Submission tag
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/submission.CodechefSubmission'
        "403":
          description: user not exist
      security:
      - token_auth:
        - read:submission
  /submission/{uid}:
    get:
      tags:
      - submission
      description: Get submissions of user(logged-in if uid is empty) across various
        platforms
      operationId: SubmissionController.Get
      parameters:
      - in: path
        name: uid
        description: UID of user
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/types.Submissions'
        "403":
          description: user not exist
      security:
      - token_auth:
        - read:submission
  /user/:
    put:
      tags:
      - user
      description: update the logged in user
      operationId: UserController.Update
      parameters:
      - in: formData
        name: username
        description: New Username
        type: string
      - in: formData
        name: password
        description: New Password
        type: string
      - in: formData
        name: fullname
        description: New Full name of User
        type: string
      - in: formData
        name: institute
        description: New Name of Institute
        type: string
      - in: formData
        name: handle.codechef
        description: New Codechef Handle
        type: string
      - in: formData
        name: handle.codeforces
        description: New Codeforces Handle
        type: string
      - in: formData
        name: handle.hackerrank
        description: New Hackerrank Handle
        type: string
      - in: formData
        name: handle.spoj
        description: New Spoj Handle
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.types.User'
        "401":
          description: ': Unauthorized'
        "409":
          description: username already exists
      security:
      - token_auth:
        - write:user
  /user/{uid}:
    get:
      tags:
      - user
      description: Get user by uid. Returns logged in user if uid is empty
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: uid of user
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.types.User'
        "401":
          description: ': Unauthorized'
        "403":
          description: :uid is invalid
      security:
      - token_auth:
        - read:user
  /user/all:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetAll
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.types.User'
      security:
      - token_auth:
        - read:user
  /user/available:
    get:
      tags:
      - user
      description: checks if username is available
      operationId: UserController.username available
      parameters:
      - in: query
        name: username
        description: Username
        required: true
        type: string
      responses:
        "200":
          description: available
        "403":
          description: unavailable
  /user/fetch/{site}:
    post:
      tags:
      - user
      description: Fetches user info from different websites and store them into the
        database
      operationId: UserController.Fetch User Info
      parameters:
      - in: path
        name: site
        description: site name
        required: true
        type: string
      responses:
        "200":
          description: Success
        "401":
          description: Unauthenticated
        "403":
          description: incorrect site or handle
      security:
      - token_auth:
        - write:user
  /user/fetch/{uid}:
    get:
      tags:
      - user
      description: Returns info of user(logged in user if uid is empty) from different
        websites
      operationId: UserController.Fetch All User Profiles And returns them
      parameters:
      - in: path
        name: uid
        description: UID of user
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/profile.AllProfiles'
        "401":
          description: Unauthenticated
        "403":
          description: invalid user
      security:
      - token_auth:
        - read:user
  /user/login:
    post:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: formData
        name: username
        description: The username for login
        required: true
        type: string
      - in: formData
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/logout:
    post:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
      security:
      - token_auth:
        - write:user
  /user/picture:
    put:
      tags:
      - user
      description: update the profile picture of logged in user
      operationId: UserController.Update Profile Pic
      parameters:
      - in: formData
        name: image
        description: profile image
        required: true
        type: file
      responses:
        "200":
          description: successful
        "401":
          description: Unauthenticated
        "403":
          description: could not get image
      security:
      - token_auth:
        - write:user
  /user/search:
    get:
      tags:
      - user
      description: Endpoint to search users
      operationId: UserController.Search
      parameters:
      - in: query
        name: count
        description: No of search objects to be returned
        type: string
      - in: query
        name: query
        description: Search query
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.types.User'
        "403":
          description: '"search query is too small"'
      security:
      - token_auth:
        - read:user
  /user/signup:
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: formData
        name: username
        description: Username
        required: true
        type: string
      - in: formData
        name: password
        description: Password
        required: true
        type: string
      - in: formData
        name: fullname
        description: Full name of User
        required: true
        type: string
      - in: formData
        name: institute
        description: Name of Institute
        type: string
      - in: formData
        name: handle.codechef
        description: Codechef Handle
        type: string
      - in: formData
        name: handle.codeforces
        description: Codeforces Handle
        type: string
      - in: formData
        name: handle.hackerrank
        description: Hackerrank Handle
        type: string
      - in: formData
        name: handle.spoj
        description: Spoj Handle
        type: string
      responses:
        "200":
          description: '{int} models.types.User.Id'
        "403":
          description: blank username or password
        "409":
          description: username already exists
  /user/verify/{site}:
    get:
      tags:
      - user
      description: verify user handles across different websites
      operationId: UserController.Verify site handles
      parameters:
      - in: path
        name: site
        description: site name
        required: true
        type: string
      - in: query
        name: handle
        description: handle to verify
        required: true
        type: string
      responses:
        "200":
          description: '{string} Handle valid'
        "403":
          description: incorrect site or handle
      security:
      - token_auth:
        - read:user
definitions:
  models.Object:
    title: Object
    type: object
    properties:
      ObjectId:
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
  models.types.AllWorldRanks:
    title: AllWorldRanks
    type: object
  models.types.FeedObject:
    title: FeedObject
    type: object
  models.types.Following:
    title: Following
    type: object
  models.types.S:
    title: S
    type: object
  models.types.User:
    title: User
    type: object
  profile.AllProfiles:
    title: AllProfiles
    type: object
  submission.CodechefSubmission:
    title: CodechefSubmission
    type: object
  types.CodechefSubmission:
    title: CodechefSubmission
    type: object
    properties:
      creation_date:
        type: string
        format: datetime
      language:
        type: string
      name:
        type: string
      points:
        type: string
      status:
        type: string
      tags:
        type: array
        items:
          type: string
      url:
        type: string
  types.CodeforcesSubmission:
    title: CodeforcesSubmission
    type: object
    properties:
      creation_date:
        type: string
        format: datetime
      name:
        type: string
      points:
        type: integer
        format: int64
      rating:
        type: integer
        format: int64
      status:
        type: string
      tags:
        type: array
        items:
          type: string
      url:
        type: string
  types.HackerrankSubmission:
    title: HackerrankSubmission
    type: object
    properties:
      created_at:
        type: string
        format: datetime
      name:
        type: string
      url:
        type: string
  types.SpojSubmission:
    title: SpojSubmission
    type: object
    properties:
      creation_date:
        type: string
        format: datetime
      language:
        type: string
      name:
        type: string
      points:
        type: integer
        format: int64
      status:
        type: string
      tags:
        type: array
        items:
          type: string
      url:
        type: string
  types.Submissions:
    title: Submissions
    type: object
    properties:
      codechef:
        type: array
        items:
          $ref: '#/definitions/types.CodechefSubmission'
      codeforces:
        type: array
        items:
          $ref: '#/definitions/types.CodeforcesSubmission'
      hackerrank:
        type: array
        items:
          $ref: '#/definitions/types.HackerrankSubmission'
      spoj:
        type: array
        items:
          $ref: '#/definitions/types.SpojSubmission'
securityDefinitions:
  token_auth:
    type: apiKey
    description: 'Enter the token here with bearer keyword Eg: Bearer {token}'
    name: Authorization
    in: header
tags:
- name: object
  description: |
    Operations about object
- name: user
  description: |
    Operations about Users
- name: contests
  description: |
    Controller to display contests
