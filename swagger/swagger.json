{
    "swagger": "2.0",
    "info": {
        "title": "Codephile Official API",
        "description": "Documentation for Codephile API",
        "version": "1.0.0",
        "contact": {
            "email": "mdg@iitr.ac.in"
        },
        "license": {}
    },
    "basePath": "/v1",
    "paths": {
        "/contests/": {
            "get": {
                "tags": [
                    "contests"
                ],
                "description": "displays all contests",
                "operationId": "ContestController.GetContests",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.Result"
                        }
                    },
                    "500": {
                        "description": "error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:contests"
                        ]
                    }
                ]
            }
        },
        "/contests/{site}": {
            "get": {
                "tags": [
                    "contests"
                ],
                "description": "Returns the contests of a specific website",
                "operationId": "ContestController.Get Particular Site's Contests",
                "parameters": [
                    {
                        "in": "path",
                        "name": "site",
                        "description": "site name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.Result"
                        }
                    },
                    "400": {
                        "description": "incorrect site"
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:contests"
                        ]
                    }
                ]
            }
        },
        "/feed/contests": {
            "get": {
                "tags": [
                    "feed"
                ],
                "description": "Provides Data for contests in the Feed",
                "operationId": "FeedController.ContestsFeed",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.Result"
                        }
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:feed"
                        ]
                    }
                ]
            }
        },
        "/feed/friend-activity": {
            "get": {
                "tags": [
                    "feed"
                ],
                "description": "Gives submission feed in paginated manner giving 100 submissions at a time",
                "operationId": "FeedController.FriendFeed",
                "parameters": [
                    {
                        "in": "query",
                        "name": "before",
                        "description": "Time before which feed to be returned, uses current time if empty or not present",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.FeedObject"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid before value"
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:feed"
                        ]
                    }
                ]
            }
        },
        "/feed/friend-activity/all": {
            "get": {
                "tags": [
                    "feed"
                ],
                "description": "Gives all submission feed of the user",
                "operationId": "FeedController.All Feed",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.FeedObject"
                            }
                        }
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:feed"
                        ]
                    }
                ]
            }
        },
        "/friends/compare": {
            "get": {
                "tags": [
                    "friends"
                ],
                "description": "Compares the data of two users",
                "operationId": "FriendsController.CompareUser",
                "parameters": [
                    {
                        "in": "query",
                        "name": "uid2",
                        "description": "uid of following",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.AllWorldRanks"
                        }
                    },
                    "400": {
                        "description": "bad uid"
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:follow"
                        ]
                    }
                ]
            }
        },
        "/friends/follow": {
            "post": {
                "tags": [
                    "friends"
                ],
                "description": "Adds the Following user's uid to the database",
                "operationId": "FriendsController.FollowUser",
                "parameters": [
                    {
                        "in": "query",
                        "name": "uid2",
                        "description": "uid of user to follow",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} user followed"
                    },
                    "400": {
                        "description": "bad uid"
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "write:follow"
                        ]
                    }
                ]
            }
        },
        "/friends/following": {
            "get": {
                "tags": [
                    "friends"
                ],
                "description": "Fetches the users the user is following",
                "operationId": "FriendsController.GetFollowing",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.FollowingUser"
                            }
                        }
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:follow"
                        ]
                    }
                ]
            }
        },
        "/friends/unfollow": {
            "post": {
                "tags": [
                    "friends"
                ],
                "description": "Un-follows the user with the given uid",
                "operationId": "FriendsController.Un-follow User",
                "parameters": [
                    {
                        "in": "query",
                        "name": "uid2",
                        "description": "uid of user to un-follow",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} user un-followed"
                    },
                    "400": {
                        "description": "bad uid"
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "write:follow"
                        ]
                    }
                ]
            }
        },
        "/graph/activity/{uid}": {
            "get": {
                "tags": [
                    "graph"
                ],
                "description": "Gives the activity graph for a user with given uid, (Logged-in user if uid is empty)",
                "operationId": "GraphController.Activity Graph",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "uid of user",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.ActivityGraph"
                        }
                    },
                    "400": {
                        "description": ":uid is invalid"
                    },
                    "401": {
                        "description": ": Unauthorized"
                    },
                    "404": {
                        "description": "user not found"
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:user"
                        ]
                    }
                ]
            }
        },
        "/graph/status/{uid}": {
            "get": {
                "tags": [
                    "graph"
                ],
                "description": "Gives the count of the various different submissions of the user with a uid (Logged-in user if uid is empty)",
                "operationId": "GraphController.Submissions Status",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "uid of user",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.StatusCounts"
                        }
                    },
                    "400": {
                        "description": ":uid is invalid"
                    },
                    "401": {
                        "description": ": Unauthorized"
                    },
                    "404": {
                        "description": "user not found"
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:user"
                        ]
                    }
                ]
            }
        },
        "/submission/all/{uid}": {
            "get": {
                "tags": [
                    "submission"
                ],
                "description": "Get all submissions of a user(logged-in if uid is empty) across various platforms",
                "operationId": "SubmissionController.All submissions",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "UID of user",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Submission"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid uid"
                    },
                    "404": {
                        "description": "User/Submission not found"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:submission"
                        ]
                    }
                ]
            }
        },
        "/submission/{site}": {
            "post": {
                "tags": [
                    "submission"
                ],
                "description": "Triggers saving of user's submissions across a particular platform into database",
                "operationId": "SubmissionController.Post",
                "parameters": [
                    {
                        "in": "path",
                        "name": "site",
                        "description": "Platform site name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "submission successfully saved"
                    },
                    "400": {
                        "description": "site invalid"
                    },
                    "503": {
                        "description": "Could not save submission, try later"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "write:submission"
                        ]
                    }
                ]
            }
        },
        "/submission/{site}/{uid}/filter": {
            "get": {
                "tags": [
                    "submission"
                ],
                "description": "Filter submissions of user on the basis of status, site and tags",
                "operationId": "SubmissionController.Filter",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "UID of user",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "site",
                        "description": "Website name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Submission status",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "tag",
                        "description": "Submission tag",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.CodechefSubmission"
                        }
                    },
                    "400": {
                        "description": "user not exist"
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:submission"
                        ]
                    }
                ]
            }
        },
        "/submission/{uid}": {
            "get": {
                "tags": [
                    "submission"
                ],
                "description": "Get paginated submissions(100 per page) of user(logged-in if uid is empty) across various platforms",
                "operationId": "SubmissionController.Get Submissions",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "UID of user",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "description": "Time before which submissions to be returned, uses current time if empty or not present",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Submission"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid uid"
                    },
                    "404": {
                        "description": "User/Submission not found"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:submission"
                        ]
                    }
                ]
            }
        },
        "/user/": {
            "put": {
                "tags": [
                    "user"
                ],
                "description": "update the logged in user",
                "operationId": "UserController.Update",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "username",
                        "description": "New Username",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "password",
                        "description": "New Password",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "fullname",
                        "description": "New Full name of User",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "institute",
                        "description": "New Name of Institute",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "handle.codechef",
                        "description": "New Codechef Handle",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "handle.codeforces",
                        "description": "New Codeforces Handle",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "handle.hackerrank",
                        "description": "New Hackerrank Handle",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "handle.spoj",
                        "description": "New Spoj Handle",
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.User"
                        }
                    },
                    "400": {
                        "description": "bad request body"
                    },
                    "401": {
                        "description": ": Unauthorized"
                    },
                    "404": {
                        "description": ": User not found"
                    },
                    "409": {
                        "description": "username already exists"
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "write:user"
                        ]
                    }
                ]
            }
        },
        "/user/all": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "get all Users",
                "operationId": "UserController.GetAll",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.User"
                            }
                        }
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:user"
                        ]
                    }
                ]
            }
        },
        "/user/available": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "checks if username is available",
                "operationId": "UserController.username available",
                "parameters": [
                    {
                        "in": "query",
                        "name": "username",
                        "description": "Username",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "available"
                    },
                    "400": {
                        "description": "empty username"
                    },
                    "403": {
                        "description": "unavailable"
                    }
                }
            }
        },
        "/user/fetch/{site}": {
            "post": {
                "tags": [
                    "user"
                ],
                "description": "Fetches user info from different websites and store them into the database",
                "operationId": "UserController.Fetch User Info",
                "parameters": [
                    {
                        "in": "path",
                        "name": "site",
                        "description": "site name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "incorrect site or handle"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "write:user"
                        ]
                    }
                ]
            }
        },
        "/user/fetch/{uid}": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "Returns info of user(logged in user if uid is empty) from different websites",
                "operationId": "UserController.Fetch All User Profiles And returns them",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "UID of user",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.AllProfiles"
                        }
                    },
                    "400": {
                        "description": "invalid user"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:user"
                        ]
                    }
                ]
            }
        },
        "/user/login": {
            "post": {
                "tags": [
                    "user"
                ],
                "description": "Logs user into the system",
                "operationId": "UserController.Login",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "username",
                        "description": "The username for login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "password",
                        "description": "The password for login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} login success"
                    },
                    "403": {
                        "description": "user not exist"
                    }
                }
            }
        },
        "/user/logout": {
            "post": {
                "tags": [
                    "user"
                ],
                "description": "Logs out current logged in user session",
                "operationId": "UserController.logout",
                "responses": {
                    "200": {
                        "description": "{string} logout success"
                    },
                    "401": {
                        "description": "invalid authentication token"
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "write:user"
                        ]
                    }
                ]
            }
        },
        "/user/picture": {
            "put": {
                "tags": [
                    "user"
                ],
                "description": "update the profile picture of logged in user",
                "operationId": "UserController.Update Profile Pic",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "image",
                        "description": "profile image",
                        "required": true,
                        "type": "file"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successful"
                    },
                    "400": {
                        "description": "could not get image"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "write:user"
                        ]
                    }
                ]
            }
        },
        "/user/search": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "Endpoint to search users",
                "operationId": "UserController.Search",
                "parameters": [
                    {
                        "in": "query",
                        "name": "count",
                        "description": "No of search objects to be returned",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Search query",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.SearchDoc"
                            }
                        }
                    },
                    "400": {
                        "description": "\"search query too small\""
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:user"
                        ]
                    }
                ]
            }
        },
        "/user/signup": {
            "post": {
                "tags": [
                    "user"
                ],
                "description": "create users",
                "operationId": "UserController.CreateUser",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "username",
                        "description": "Username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "password",
                        "description": "Password",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "fullname",
                        "description": "Full name of User",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "institute",
                        "description": "Name of Institute",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "handle.codechef",
                        "description": "Codechef Handle",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "handle.codeforces",
                        "description": "Codeforces Handle",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "handle.hackerrank",
                        "description": "Hackerrank Handle",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "handle.spoj",
                        "description": "Spoj Handle",
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} types.User.Id"
                    },
                    "400": {
                        "description": "bad request body or blank username/password/full name"
                    },
                    "409": {
                        "description": "username already exists"
                    },
                    "500": {
                        "description": "server_error"
                    }
                }
            }
        },
        "/user/verify/{site}": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "verify user handles across different websites",
                "operationId": "UserController.Verify site handles",
                "parameters": [
                    {
                        "in": "path",
                        "name": "site",
                        "description": "site name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "handle",
                        "description": "handle to verify",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} Handle valid"
                    },
                    "400": {
                        "description": "invalid contest site"
                    },
                    "403": {
                        "description": "incorrect handle"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:user"
                        ]
                    }
                ]
            }
        },
        "/user/{uid}": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "Get user by uid. Returns logged in user if uid is empty",
                "operationId": "UserController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "uid of user",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.User"
                        }
                    },
                    "400": {
                        "description": ":uid is invalid"
                    },
                    "401": {
                        "description": ": Unauthorized"
                    },
                    "404": {
                        "description": "user not found"
                    },
                    "500": {
                        "description": "server_error"
                    }
                },
                "security": [
                    {
                        "token_auth": [
                            "read:user"
                        ]
                    }
                ]
            }
        }
    },
    "definitions": {
        "bson.ObjectId": {
            "title": "ObjectId",
            "type": "object"
        },
        "types.ActivityGraph": {
            "title": "ActivityGraph",
            "type": "array",
            "items": {
                "$ref": "#/definitions/types.SubmissionCount"
            }
        },
        "types.AllProfiles": {
            "title": "AllProfiles",
            "type": "object",
            "properties": {
                "codechefProfile": {
                    "$ref": "#/definitions/types.ProfileInfo"
                },
                "codeforcesProfile": {
                    "$ref": "#/definitions/types.ProfileInfo"
                },
                "hackerrankProfile": {
                    "$ref": "#/definitions/types.ProfileInfo"
                },
                "spojProfile": {
                    "$ref": "#/definitions/types.ProfileInfo"
                }
            }
        },
        "types.AllWorldRanks": {
            "title": "AllWorldRanks",
            "type": "object",
            "properties": {
                "codechef_ranks": {
                    "$ref": "#/definitions/types.WorldRankComparison"
                },
                "codeforces_ranks": {
                    "$ref": "#/definitions/types.WorldRankComparison"
                },
                "hackerrank_ranks": {
                    "$ref": "#/definitions/types.WorldRankComparison"
                },
                "spoj_ranks": {
                    "$ref": "#/definitions/types.WorldRankComparison"
                }
            }
        },
        "types.CodechefSubmission": {
            "title": "CodechefSubmission",
            "type": "object"
        },
        "types.FeedObject": {
            "title": "FeedObject",
            "type": "object",
            "properties": {
                "fullname": {
                    "type": "string"
                },
                "picture": {
                    "type": "string"
                },
                "submission": {
                    "$ref": "#/definitions/types.Submission"
                },
                "user_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "types.Following": {
            "title": "Following",
            "type": "object",
            "properties": {
                "f_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                }
            }
        },
        "types.FollowingUser": {
            "title": "FollowingUser",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "fullname": {
                    "type": "string"
                },
                "picture": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "types.Handle": {
            "title": "Handle",
            "type": "object",
            "properties": {
                "codechef": {
                    "type": "string"
                },
                "codeforces": {
                    "type": "string"
                },
                "hackerearth": {
                    "type": "string"
                },
                "hackerrank": {
                    "type": "string"
                },
                "spoj": {
                    "type": "string"
                }
            }
        },
        "types.LastFetchedSubmission": {
            "title": "LastFetchedSubmission",
            "type": "object",
            "properties": {
                "Codechef": {
                    "type": "string",
                    "format": "datetime"
                },
                "Codeforces": {
                    "type": "string",
                    "format": "datetime"
                },
                "Hackerrank": {
                    "type": "string",
                    "format": "datetime"
                },
                "Spoj": {
                    "type": "string",
                    "format": "datetime"
                }
            }
        },
        "types.Ongoing": {
            "title": "Ongoing",
            "type": "object",
            "properties": {
                "EndTime": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Platform": {
                    "type": "string"
                },
                "challenge_type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "types.ProfileInfo": {
            "title": "ProfileInfo",
            "type": "object",
            "properties": {
                "accuracy": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "rank": {
                    "type": "string"
                },
                "school": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "types.Result": {
            "title": "Result",
            "type": "object",
            "properties": {
                "ongoing": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Ongoing"
                    }
                },
                "timestamp": {
                    "type": "string"
                },
                "upcoming": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Upcoming"
                    }
                }
            }
        },
        "types.SearchDoc": {
            "title": "SearchDoc",
            "type": "object",
            "properties": {
                "fullname": {
                    "type": "string"
                },
                "handle": {
                    "$ref": "#/definitions/types.Handle"
                },
                "id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "institute": {
                    "type": "string"
                },
                "picture": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "types.SolvedProblemsCount": {
            "title": "SolvedProblemsCount",
            "type": "object",
            "properties": {
                "codechef": {
                    "type": "integer",
                    "format": "int64"
                },
                "codeforces": {
                    "type": "integer",
                    "format": "int64"
                },
                "hackerrank": {
                    "type": "integer",
                    "format": "int64"
                },
                "spoj": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "types.StatusCounts": {
            "title": "StatusCounts",
            "type": "object",
            "properties": {
                "StatusCompilationError": {
                    "type": "integer",
                    "format": "int64"
                },
                "StatusCorrect": {
                    "type": "integer",
                    "format": "int64"
                },
                "StatusMemoryLimitExceeded": {
                    "type": "integer",
                    "format": "int64"
                },
                "StatusPartial": {
                    "type": "integer",
                    "format": "int64"
                },
                "StatusRuntimeError": {
                    "type": "integer",
                    "format": "int64"
                },
                "StatusTimeLimitExceeded": {
                    "type": "integer",
                    "format": "int64"
                },
                "StatusWrongAnswer": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "types.Submission": {
            "title": "Submission",
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "format": "datetime"
                },
                "language": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "points": {
                    "type": "integer",
                    "format": "int64"
                },
                "rating": {
                    "type": "integer",
                    "format": "int64"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "types.SubmissionCount": {
            "title": "SubmissionCount",
            "type": "object",
            "properties": {
                "correct": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "total": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "types.Upcoming": {
            "title": "Upcoming",
            "type": "object",
            "properties": {
                "Duration": {
                    "type": "string"
                },
                "EndTime": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Platform": {
                    "type": "string"
                },
                "StartTime": {
                    "type": "string"
                },
                "challenge_type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "types.User": {
            "title": "User",
            "type": "object",
            "properties": {
                "fullname": {
                    "type": "string"
                },
                "handle": {
                    "$ref": "#/definitions/types.Handle"
                },
                "id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "institute": {
                    "type": "string"
                },
                "no_of_following": {
                    "type": "integer",
                    "format": "int64"
                },
                "picture": {
                    "type": "string"
                },
                "profiles": {
                    "$ref": "#/definitions/types.AllProfiles"
                },
                "recent_submissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Submission"
                    }
                },
                "solved_problems_count": {
                    "$ref": "#/definitions/types.SolvedProblemsCount"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "types.WorldRankComparison": {
            "title": "WorldRankComparison",
            "type": "object",
            "properties": {
                "rank1": {
                    "type": "string"
                },
                "rank2": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "token_auth": {
            "type": "apiKey",
            "description": "Enter the token here with bearer keyword Eg: Bearer {token}",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "name": "user",
            "description": "Operations about Users\n"
        },
        {
            "name": "contests",
            "description": "Controller to display contests\n"
        }
    ]
}